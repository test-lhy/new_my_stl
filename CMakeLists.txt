cmake_minimum_required(VERSION 3.24)
project(my_stl)
set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 23)
file(GLOB STD_SUBDIRS CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/my_std/*)
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0 -fno-elide-constructors -Wall -fno-omit-frame-pointer")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -fno-elide-constructors -Wall -fno-omit-frame-pointer")
    elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0 -fno-elide-constructors -Wall -fsanitize=address,leak,undefined -fno-omit-frame-pointer")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -fno-elide-constructors -Wall -fsanitize=address,leak,undefined -fno-omit-frame-pointer")
    endif ()
endif ()

set(all_library_name)
foreach (dir ${STD_SUBDIRS})
    if (IS_DIRECTORY ${dir})
        add_subdirectory(${dir})
        list(APPEND all_library_name ${variable_for_father})
    endif ()
endforeach ()
file(GLOB ALL_SRC_FILES CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/*.cpp)
foreach (SRC_FILE ${ALL_SRC_FILES})
    get_filename_component(EXE_NAME ${SRC_FILE} NAME_WE)
    message(STATUS "Adding executable ${EXE_NAME}")
    add_executable(${EXE_NAME} ${SRC_FILE})
    foreach (library ${all_library_name})
        target_link_libraries(${EXE_NAME} PUBLIC ${library})
    endforeach ()
endforeach ()